<!DOCTYPE html>
<html>
<head>
	<title>Расписание занятий ЮРГПУ (НПИ)</title>
	<meta charset="utf-8" />

	<link rel="stylesheet" type="text/css" href="~/css/style.css" />
	<link rel="stylesheet" type="text/css" href="http://fonts.googleapis.com/css?family=Yanone+Kaffeesatz" />
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css">

	<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
	<script src="https://unpkg.com/http-vue-loader"></script>
	<script src="https://unpkg.com/vue-router/dist/vue-router.js"></script>
	<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
	<script src="https://unpkg.com/vuex@3.1.0/dist/vuex.js"></script>
</head>
<body>
	<div id="app">
		<common-title></common-title>
		<common-menu></common-menu>
		<common-content></common-content>
		<common-footer></common-footer>
	</div>

	<script>
		var store = new Vuex.Store({
			state: {
				firstName: localStorage.getItem('user-firstName') || '',
				secondName: localStorage.getItem('user-secondName') || '',
				token: localStorage.getItem('user-token') || ''
			},
			getters: {
				isAuthenticated: state => !!state.token
			},
			mutations: {
				setFirstName: function (state, firstName) {
					state.firstName = firstName;
				},
				setSecondName: function (state, secondName) {
					state.secondName = secondName;
				},
				setToken: function (state, token) {
					state.token = token;
				}
			}
		});

		var ifNotAuthenticated = (to, from, next) => {
			if (!store.getters.isAuthenticated) {
				next();
			} else {
				next('/');
			}
		}

		const ifAuthenticated = (to, from, next) => {
			if (store.getters.isAuthenticated) {
				next();
			} else {
				next('/login');
			}
		}

		var router = new VueRouter({
			mode: 'history',
			routes: [
				{
					path: '/',
					redirect: '/index'
				}, {
					path: '/index',
					component: httpVueLoader('/js/components/main/main-component.vue')
				}, {
					path: '/faculties',
					component: httpVueLoader('/js/components/schedule/faculties-component.vue')
				}, {
					path: '/faculties/:facultyId/courses',
					component: httpVueLoader('/js/components/schedule/courses-component.vue')
				}, {
					path: '/faculties/:facultyId/courses/:courseNumber/groups',
					component: httpVueLoader('/js/components/schedule/groups-component.vue')
				}, {
					path: '/faculties/:facultyId/courses/:courseNumber/groups/:groupId/schedule',
					component: httpVueLoader('/js/components/schedule/schedule-component.vue')
				}, {
					path: '/teachers',
					component: httpVueLoader('/js/components/teachers/teachers-component.vue')
				}, {
					path: '/administration',
					component: httpVueLoader('/js/components/administration/administration-component.vue'),
					beforeEnter: ifAuthenticated
				}, {
					path: '/administration/faculties',
					component: httpVueLoader('/js/components/administration/edit-faculties-component.vue'),
					beforeEnter: ifAuthenticated
				}, {
					path: '/administration/departments',
					component: httpVueLoader('/js/components/administration/edit-departments-component.vue'),
					beforeEnter: ifAuthenticated
				}, {
					path: '/login',
					component: httpVueLoader('/js/components/login/login-component.vue'),
					beforeEnter: ifNotAuthenticated
				}, {
					path: '*',
					redirect: '/index'
				}
			]
		});		

		new Vue({
			el: "#app",
			store,
			router,
			components: {
				'common-title': httpVueLoader('/js/components/common/common-title.vue'),
				'common-menu': httpVueLoader('/js/components/common/common-menu.vue'),
				'common-content': httpVueLoader('/js/components/common/common-content.vue'),
				'common-footer': httpVueLoader('/js/components/common/common-footer.vue')
			},
			created: function () {
				var token = localStorage.getItem('user-token');
				if (token) {
					axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
				}

				axios.interceptors.response.use(function (response) {
					return response;
				}, function (err) {
					if (err.response.status == 401) {
						localStorage.removeItem('user-token');
						localStorage.removeItem('user-firstName');
						localStorage.removeItem('user-secondName');

						store.commit('setToken', '');
						store.commit('setFirstName', '');
						store.commit('setSecondName', '');

						delete axios.defaults.headers.common['Authorization'];

						router.push('/login');
					}

					return Promise.reject(err);
				});
			}
		});
	</script>
</body>
</html>